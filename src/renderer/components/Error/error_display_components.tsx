// renderer/components/Error/ErrorDisplay.tsx
import React from 'react';

interface ErrorDisplayProps {
  title?: string;
  message: string;
  details?: string;
  onRetry?: () => void;
  onClose?: () => void;
  type?: 'error' | 'warning' | 'info';
}

/**
 * Ê±éÁî®„Ç®„É©„ÉºË°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
export const ErrorDisplay: React.FC<ErrorDisplayProps> = ({
  title = '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
  message,
  details,
  onRetry,
  onClose,
  type = 'error',
}) => {
  const getIcon = () => {
    switch (type) {
      case 'error':
        return '‚ö†Ô∏è';
      case 'warning':
        return '‚ö†';
      case 'info':
        return '‚ÑπÔ∏è';
      default:
        return '‚ö†Ô∏è';
    }
  };

  return (
    <div className={`error-display error-${type}`}>
      <div className="error-icon">{getIcon()}</div>
      <div className="error-content">
        <h3 className="error-title">{title}</h3>
        <p className="error-message">{message}</p>
        {details && (
          <details className="error-details">
            <summary>Ë©≥Á¥∞ÊÉÖÂ†±</summary>
            <pre>{details}</pre>
          </details>
        )}
      </div>
      <div className="error-actions">
        {onRetry && (
          <button className="primary" onClick={onRetry}>
            ÂÜçË©¶Ë°å
          </button>
        )}
        {onClose && (
          <button className="secondary" onClick={onClose}>
            Èñâ„Åò„Çã
          </button>
        )}
      </div>
    </div>
  );
};

/**
 * „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº
 */
export const FileLoadError: React.FC<{
  fileName: string;
  error: string;
  onRetry?: () => void;
  onClose: () => void;
}> = ({ fileName, error, onRetry, onClose }) => {
  return (
    <ErrorDisplay
      title="„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
      message={`${fileName} „ÇíÈñã„Åè„Åì„Å®„Åå„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`}
      details={error}
      onRetry={onRetry}
      onClose={onClose}
      type="error"
    />
  );
};

/**
 * „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº
 */
export const NetworkError: React.FC<{
  onRetry?: () => void;
  onClose?: () => void;
}> = ({ onRetry, onClose }) => {
  return (
    <ErrorDisplay
      title="„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº"
      message="Êé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
      onRetry={onRetry}
      onClose={onClose}
      type="error"
    />
  );
};

/**
 * „Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº
 */
export const DatabaseError: React.FC<{
  error: string;
  onClose: () => void;
}> = ({ error, onClose }) => {
  return (
    <ErrorDisplay
      title="„Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº"
      message="„Éá„Éº„Çø„Éô„Éº„ÇπÊìç‰Ωú‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ"
      details={error}
      onClose={onClose}
      type="error"
    />
  );
};

/**
 * Ê®©Èôê„Ç®„É©„Éº
 */
export const PermissionError: React.FC<{
  resource: string;
  onClose: () => void;
}> = ({ resource, onClose }) => {
  return (
    <ErrorDisplay
      title="„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"
      message={`${resource} „Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü„ÄÇ`}
      details="ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅßÂÆüË°å„Åô„Çã„Åã„ÄÅ„Éï„Ç°„Ç§„É´„ÅÆÊ®©Èôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
      onClose={onClose}
      type="error"
    />
  );
};

/**
 * Á©∫„ÅÆÁä∂ÊÖãË°®Á§∫
 */
export const EmptyState: React.FC<{
  icon?: string;
  title: string;
  message: string;
  action?: {
    label: string;
    onClick: () => void;
  };
}> = ({ icon = 'üìÇ', title, message, action }) => {
  return (
    <div className="empty-state">
      <div className="empty-icon">{icon}</div>
      <h3 className="empty-title">{title}</h3>
      <p className="empty-message">{message}</p>
      {action && (
        <button className="primary" onClick={action.onClick}>
          {action.label}
        </button>
      )}
    </div>
  );
};

/**
 * „Ç®„É©„Éº„Éê„Ç¶„É≥„ÉÄ„É™
 */
interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

export class ErrorBoundary extends React.Component<
  { children: React.ReactNode; fallback?: React.ReactNode },
  ErrorBoundaryState
> {
  constructor(props: any) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('ErrorBoundary caught:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <ErrorDisplay
          title="‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº"
          message="„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ"
          details={this.state.error?.stack}
          onRetry={() => {
            this.setState({ hasError: false, error: null });
            window.location.reload();
          }}
          type="error"
        />
      );
    }

    return this.props.children;
  }
}

/**
 * „Ç§„É≥„É©„Ç§„É≥„Ç®„É©„ÉºË°®Á§∫ÔºàÂ∞èÂûãÔºâ
 */
export const InlineError: React.FC<{
  message: string;
  onDismiss?: () => void;
}> = ({ message, onDismiss }) => {
  return (
    <div className="inline-error">
      <span className="inline-error-icon">‚ö†</span>
      <span className="inline-error-message">{message}</span>
      {onDismiss && (
        <button className="inline-error-dismiss" onClick={onDismiss}>
          √ó
        </button>
      )}
    </div>
  );
};
